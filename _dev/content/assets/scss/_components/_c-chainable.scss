/*!
=========================================================
============================= component Chainable animaation
=========================================================
 */
 // ==========================================
 $chainable: 'chainable';
 $chainable_column: 'chainableEl';
 
 .#{$chainable} {
     $headerDefaultHeight: $height-header;

     $vertPad: 20px;
     $sidePad: 20px;
 
     $numOfEls: 3;
     $elMrg: 1%;
 
 
     $initAT: 1s;
     $initDelayStep: 0.1s;
     $fullInitAT: $initAT + $initDelayStep * ($numOfEls - 1);
     $moveAT: 0.6s;
     $expandAT: 0.7s;
     $expandDelay: 0.1s;
     $bgScaleAT: 0.8s;
     $fadeoutAT: $moveAT + $expandAT/2;
     $indexHoverAT: 0.5s;
     $closeBtnAT: 0.3s;
     $closeBtnLineDelay: 0.15s;
     $fullExpandAT: $moveAT + $expandDelay + $expandAT;
     $contentFadeinAT: 0.5s;
 
     // ==========================================
    @mixin elHover {
         .#{$chainable_column}:hover & {
             @content
         }
    };
 
    @mixin elActive {
         .#{$chainable_column}.is-active & {
             @content
         }
    };
 
     @mixin contInactive {
         .#{$chainable}.is-inactive & {
             @content
         }
    };
 
    @mixin contElActive {
         .#{$chainable}.is-#{$chainable_column}-active & {
             @content
         }
    };
     position: relative;
     overflow: hidden;
     width: 100%;
     height: calc(100vh - #{$headerDefaultHeight});
     padding: $vertPad $sidePad;
    //  background-color: rgba($color_1, 0.6);
 
     &__inner {
         position: relative;
         height: 100%;
 
         &:hover .#{$chainable_column}__bg:after {
             opacity: 1;
         }
     }
     
     &El{
         
        $elW: (100% - $elMrg * ($numOfEls - 1)) / $numOfEls;
        $elMrgRel: percentage($elMrg / $elW);
 
        position: absolute;
        left: 0;
        top: 0;
        width: $elW;
        height: 100%;
        background: rgba($color_1, 0.3);
        transition: transform $moveAT $expandAT,
                    width $expandAT,
                    opacity $moveAT $expandAT,
                    z-index 0s $moveAT + $expandAT;
        will-change: transform, width, opacity;
 
        &:not(.is-active) {
            cursor: pointer;
        }
 
        &__overflow {
            overflow: hidden;
            position: relative;
            height: 100%;
        }
 
        &__inner {
            overflow: hidden;
            position: relative;
            height: 100%;
            transition: transform $initAT;
 
            @include contInactive {
                transform: translate3d(0, 100%, 0);
            }
        }
 
        &__bg {
            position: relative;
            width: 100vw;
            //width: calc(100vw - #{$sidePad * 2});
            height: 100%;
            transition: transform $moveAT $expandAT;
            will-change: transform;
 
            &:before {
                content: "";
                position: absolute;
                left: 0;
                top: -5%;
                width: 100%;
                height: 110%;
                background-size: cover;
                background-position: center center;
                transition: transform $initAT;
                transform: translate3d(0, 0, 0) scale(1);
 
                @include contInactive {
                    transform: translate3d(0, -100%, 0) scale(1.2);
                }
 
                @include elActive {
                    transition: transform $bgScaleAT;
                }
            }
 
            &:after {
                $opacityAT: 0.5s;
 
                content: "";
                z-index: 1;
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.3);
                opacity: 0;
                transition: opacity $opacityAT;
 
                @include contElActive {
                    transition: opacity $opacityAT $fullExpandAT;
                    opacity: 1 !important;
                }
            }
        }
         
        &__preview-cont {
             z-index: 2;
             display: flex;
             justify-content: center;
             align-items: center;
             position: absolute;
             left: 0;
             top: 0;
             width: 100%;
             height: 100%;
             transition: all 0.3s $fullInitAT - 0.2s;
 
             @include contInactive {
                 opacity: 0;
                 transform: translateY(10px);
             }
 
             @include contElActive {
                 opacity: 0;
                 transform: translateY(30px);
                 transition: all 0.5s;
             }
        }
 
        &__heading {
             color: #fff;
             text-transform: uppercase;
             font-size: 12vw / $numOfEls;
        }
 
        &__content {
             z-index: -1;
             position: absolute;
             left: 0;
             top: 0;
             width: 100%;
             height: 100%;
             padding: 0;
             opacity: 0;
             pointer-events: none;
             transition: all 0.1s;
 
             @include elActive {
                 z-index: 2;
                 opacity: 1;
                 pointer-events: auto;
                 transition: all $contentFadeinAT $fullExpandAT;
             }
        }
 
        &__text {
            position: relative;
            color: #fff;
            height: 100%;
            overflow-y: auto;
            &--title {
                text-transform: uppercase;
                font-size: 2.1rem;
                padding: 30px 0;
                text-align: center;
            }
            &--content {
                width: 100%;
                // text-transform: uppercase;
                font-size: 1rem;
                margin: auto;
            }
        }
 
        &__close-btn {
            z-index: -1;
            position: absolute;
            right: 10px;
            top: 10px;
            width: 40px;
            height: 40px;
            opacity: 0;
            pointer-events: none;
            transition: all 0s $closeBtnAT + $closeBtnLineDelay;
            cursor: pointer;
 
            @include elActive {
                z-index: 5;
                opacity: 1;
                pointer-events: auto;
                transition: all 0s $fullExpandAT;
            }
 
            &:before, &:after {
                content: "";
                position: absolute;
                left: 0;
                top: 50%;
                width: 100%;
                height: 8px;
                margin-top: -4px;
                background: #fff;
                opacity: 0;
                transition: opacity 0s;
 
                @include elActive {
                    opacity: 1;
                }
            }
 
            &:before {
                transform: rotate(45deg) translateX(100%);
 
                @include elActive {
                    transition: all
                        $closeBtnAT
                        $fullExpandAT
                        cubic-bezier(.72, .09, .32, 1.57);
                    transform: rotate(45deg) translateX(0);
                }
            }
 
            &:after {
                transform: rotate(-45deg) translateX(100%);
 
                @include elActive {
                    transition: all
                        $closeBtnAT
                        $fullExpandAT +
                        $closeBtnLineDelay
                        cubic-bezier(.72, .09, .32, 1.57);
                    transform: rotate(-45deg) translateX(0);
                }
            }
        }
 
        &__index {
            overflow: hidden;
            position: absolute;
            left: 0;
            bottom: $vertPad * -1;
            width: 100%;
            height: 100%;
            min-height: 250px;
            text-align: center;
            font-size: calc(100vw / #{$numOfEls});
 
            @media all and (min-width: 1000px) {
                font-size: calc(1000px / #{$numOfEls});
            }
 
            line-height: 0.85;
            font-weight: bold;
            transition: transform $indexHoverAT,
                opacity $moveAT/2 $expandAT + $expandDelay + $moveAT;
            transform: translate3d(0, 1vw, 0);
 
            @include elHover {
                transform: translate3d(0, 0, 0);
            }
 
            @include contElActive {
                transition: transform $indexHoverAT, opacity $moveAT/2;
                opacity: 0;
            }
 
            &-back, &-front {
                position: absolute;
                left: 0;
                bottom: 0;
                width: 100%;
            }
 
            &-back {
                color: rgba(156, 156, 156, 0.7);
                opacity: 0.4;
                transition: opacity $indexHoverAT/2 $indexHoverAT/2;
 
                @include elHover {
                    transition: opacity $indexHoverAT/2;
                    opacity: 1;
                }
            }
 
            &-overlay {
                overflow: hidden;
                position: relative;
                transform: translate3d(0, 100%, 0);
                transition: transform $indexHoverAT 0.1s;
                color: transparent;
 
                &:before {
                    content: attr(data-index);
                    position: absolute;
                    left: 0;
                    bottom: 0;
                    width: 100%;
                    height: 100%;
                    color: #fff;
                    transform: translate3d(0, -100%, 0);
                    transition: transform $indexHoverAT 0.1s;
                }
 
                @include elHover {
                    transform: translate3d(0, 0, 0);
 
                    &:before {
                        transform: translate3d(0, 0, 0);
                    }
                }
            }
        }
 
        @for $i from 0 to $numOfEls {
            &:nth-child(#{$i + 1}) {
                $x: (100% + $elMrgRel) * $i;
                transform: translate3d($x, 0, 0);
                transform-origin: $x + 50% 50%;
 
                @include contElActive {
                    &:not(.is-active) {
                        transform: scale(0.5) translate3d($x, 0, 0);
                        opacity: 0;
                        transition: transform $fadeoutAT, opacity $fadeoutAT;
                    }
                }
 
                .#{$chainable_column}__inner {
                    transition-delay: $initDelayStep * $i;
                }
 
                .#{$chainable_column}__bg {
                   transform: translate3d($elW * $i * -1, 0, 0);
                   &:before {
                    /*! iteración #{$i} */
                        transition-delay: 0.1s * $i;
                        background-image: url('#{$GlobalImages}unit_bg_#{$i + 1}.png');
                        mix-blend-mode: multiply;
                       }
                   }
               }
           }
           
           &:nth-child(1){
               .#{$chainable_column}__bg{
                   background-color: var(--color_4-dark);
               }
           }
           &:nth-child(2){
               .#{$chainable_column}__bg{
                   background-color: var(--color_2-light);
                   &:before{
                       filter: saturate(20);
                   }
               }
           }
           &:nth-child(3){
               .#{$chainable_column}__bg{
                   background-color: var(--color_4-dark);
            }
        }

        &:hover {
            .#{$chainable_column}__bg:after {
                opacity: 0;
            }
        }
 
        &.is-active {
            z-index: 1;
            width: 100%;
            transform: translate3d(0, 0, 0);
            transition: transform $moveAT,
                width $expandAT $moveAT + $expandDelay,
                z-index 0s;
 
            .#{$chainable_column}__bg {
                transform: translate3d(0, 0, 0);
                transition: transform $moveAT;
                background-color: initial;
 
                &:before {
                    transition-delay: $moveAT;
                    transform: scale(1.1);
                    opacity: 0.3;
                }
            }
        }
        &.is-disabled {
            filter: grayscale(100%);
            cursor: no-drop;

            .chainableEl__heading:after {
                content: "\61";
                position: absolute;
                top: 0;
                left: 0;
                bottom: -6rem;
                right: 0;
                margin: auto;
                height: 3rem;
                width: 3rem;
                font-family: "b-english";
                text-transform: none;
                font-size: 2rem;
                color: #fff
            }
        }
    }
 }